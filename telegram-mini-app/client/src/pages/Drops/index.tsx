import React, { useState, useMemo } from 'react';
import './Drops.scss';
import BottomNav from '../../components/common/BottomNav';
import { useAuth } from '../../context/AuthContext';
import { useDrops } from '../../hooks/useDrops';
import Button from '../../components/common/Button';

// –¢–∏–ø—ã –¥–ª—è –¥—Ä–æ–ø–æ–≤
interface Drop {
  id: number;
  name: string;
  level: number;
  income: number;
  date: string;
}

const DropsPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'info' | 'drops'>('drops');
  const [activeFilter, setActiveFilter] = useState<'all' | 'level' | 'income'>('all');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');

  // –¢–∏–ø—ã –¥—Ä–æ–ø–æ–≤ –ø–æ –º–Ω–æ–∂–∏—Ç–µ–ª—é –∫–∞—á–µ—Å—Ç–≤–∞
  const dropTypes = [
    { level: 1, multiplier: 1.0, baseIncome: 10 },
    { level: 2, multiplier: 1.5, baseIncome: 10 },
    { level: 3, multiplier: 2.0, baseIncome: 10 },
    { level: 4, multiplier: 2.5, baseIncome: 10 },
    { level: 5, multiplier: 3.0, baseIncome: 10 },
  ];

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç –¥—Ä–æ–ø–∞
  const calculateIncome = (baseIncome: number, level: number, multiplier: number) => {
    return Math.round(baseIncome * level * multiplier);
  };

  // –ü—Ä–∏–º–µ—Ä—ã –¥—Ä–æ–ø–æ–≤
  const dropsList: Drop[] = [
    { id: 1, name: '–ê–ª–µ–∫—Å–µ–π', level: 3, income: 500, date: '12.05.2023' },
    { id: 2, name: '–°–µ—Ä–≥–µ–π', level: 2, income: 250, date: '15.05.2023' },
    { id: 3, name: '–ò–≤–∞–Ω', level: 5, income: 1000, date: '20.04.2023' },
    { id: 4, name: '–ú–∞—Ä–∏—è', level: 1, income: 100, date: '01.06.2023' },
    { id: 5, name: '–ê–Ω–Ω–∞', level: 4, income: 750, date: '05.05.2023' },
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
  const handleFilterChange = (filter: 'all' | 'level' | 'income') => {
    if (activeFilter === filter) {
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∫–ª–∏–∫–µ
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setActiveFilter(filter);
      setSortDirection('desc'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    }
  };

  // –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥—Ä–æ–ø–æ–≤
  const sortedDrops = useMemo(() => {
    const dropsCopy = [...dropsList];
    
    if (activeFilter === 'all') {
      return dropsCopy;
    }
    
    return dropsCopy.sort((a, b) => {
      const valueA = activeFilter === 'level' ? a.level : a.income;
      const valueB = activeFilter === 'level' ? b.level : b.income;
      
      return sortDirection === 'asc' 
        ? valueA - valueB 
        : valueB - valueA;
    });
  }, [dropsList, activeFilter, sortDirection]);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { user } = useAuth();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä–æ–ø–∞—Ö
  const { 
    drops, 
    stats,
    isLoading, 
    error,
    inviteLink,
    generateInviteLink,
    upgradeUserDrop
  } = useDrops();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notification, setNotification] = useState<{
    show: boolean;
    message: string;
    type: 'success' | 'error' | 'info';
  }>({
    show: false,
    message: '',
    type: 'info'
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  const handleGenerateInviteLink = async () => {
    try {
      const link = await generateInviteLink();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      setNotification({
        show: true,
        message: `–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${link}`,
        type: 'success'
      });
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      navigator.clipboard.writeText(link).then(() => {
        console.log('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      }).catch(err => {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É:', err);
      });
      
      // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setNotification(prev => ({ ...prev, show: false }));
      }, 5000);
    } catch (error) {
      console.error('Error generating invite link:', error);
      setNotification({
        show: true,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É',
        type: 'error'
      });
      
      // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setNotification(prev => ({ ...prev, show: false }));
      }, 3000);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è –¥—Ä–æ–ø–∞
  const handleUpgradeDrop = async (dropId: string) => {
    try {
      const success = await upgradeUserDrop(dropId);
      
      if (success) {
        setNotification({
          show: true,
          message: '–î—Ä–æ–ø —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω!',
          type: 'success'
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          setNotification(prev => ({ ...prev, show: false }));
        }, 3000);
      }
    } catch (error) {
      console.error('Error upgrading drop:', error);
      setNotification({
        show: true,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –¥—Ä–æ–ø',
        type: 'error'
      });
      
      // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setNotification(prev => ({ ...prev, show: false }));
      }, 3000);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥—Ä–æ–ø–∞
  const getDropQualityLabel = (quality: string): string => {
    switch (quality) {
      case 'common': return '–û–±—ã—á–Ω—ã–π';
      case 'rare': return '–†–µ–¥–∫–∏–π';
      case 'epic': return '–≠–ø–∏—á–µ—Å–∫–∏–π';
      case 'legendary': return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π';
      default: return quality;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –æ—Ç –¥—Ä–æ–ø–∞
  const getDropIncome = (drop: any): number => {
    return drop.income_per_hour * drop.income_multiplier;
  };

  return (
    <div className="drops-page">
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ */}
      {notification.show && (
        <div className={`notification notification--${notification.type}`}>
          {notification.message}
        </div>
      )}
      
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <div className="drops-page__balance">
        <h2>{user ? user.balance.toLocaleString() : '0'} –º–æ–Ω–µ—Ç</h2>
      </div>
      
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫—É */}
      {isLoading && <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä–æ–ø–æ–≤...</div>}
      {error && <div className="error">{error}</div>}
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–æ–ø–æ–≤ */}
      <div className="drops-stats">
        <div className="drops-stats__item">
          <h3>–í—Å–µ–≥–æ –¥—Ä–æ–ø–æ–≤</h3>
          <p>{stats?.total || 0}</p>
        </div>
        <div className="drops-stats__item">
          <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥—Ä–æ–ø—ã</h3>
          <p>{stats?.active || 0}</p>
        </div>
        <div className="drops-stats__item">
          <h3>–ü–æ—Ç–µ—Ä—è–Ω–æ –∑–∞ 24—á</h3>
          <p>{stats?.lost_24h || 0}</p>
        </div>
        <div className="drops-stats__item">
          <h3>–î–æ—Ö–æ–¥ –≤ —á–∞—Å</h3>
          <p>{stats?.income_per_hour || 0}</p>
        </div>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ */}
      <div className="drops-page__actions">
        <Button 
          variant="primary"
          fullWidth
          onClick={handleGenerateInviteLink}
          disabled={isLoading}
        >
          –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        </Button>
        
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å */}
        {inviteLink && (
          <div className="invite-link">
            <p>–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:</p>
            <div className="invite-link__box" onClick={() => navigator.clipboard.writeText(inviteLink)}>
              {inviteLink}
              <span className="copy-icon">üìã</span>
            </div>
          </div>
        )}
      </div>
      
      {/* –°–ø–∏—Å–æ–∫ –¥—Ä–æ–ø–æ–≤ */}
      <div className="drops-page__section">
        <h2>–í–∞—à–∏ –¥—Ä–æ–ø—ã</h2>
        
        <div className="drops-list">
          {drops.length > 0 ? (
            drops.map(drop => (
              <div key={drop.drop_id} className={`drop-card drop-card--${drop.quality}`}>
                <div className="drop-card__header">
                  <h3>{getDropQualityLabel(drop.quality)}</h3>
                  <span className="drop-level">–£—Ä–æ–≤–µ–Ω—å {drop.level}</span>
                </div>
                
                <div className="drop-card__body">
                  <p>–î–æ—Ö–æ–¥: {getDropIncome(drop)} / —á–∞—Å</p>
                  <p>ID: {drop.invitee_id.substring(0, 8)}...</p>
                  <p>–°–æ–∑–¥–∞–Ω: {new Date(drop.created_at).toLocaleDateString()}</p>
                </div>
                
                <div className="drop-card__footer">
                  <Button 
                    variant="accent"
                    onClick={() => handleUpgradeDrop(drop.drop_id)}
                    disabled={!user || user.balance < Math.floor(100 * Math.pow(1.5, drop.level))}
                  >
                    –£–ª—É—á—à–∏—Ç—å ({Math.floor(100 * Math.pow(1.5, drop.level))} –º–æ–Ω–µ—Ç)
                  </Button>
                </div>
              </div>
            ))
          ) : (
            <div className="drops-empty">
              <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä–æ–ø–æ–≤</p>
              <p>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥—Ä–æ–ø—ã</p>
            </div>
          )}
        </div>
      </div>
      
      {/* –ù–∏–∂–Ω–µ–µ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <BottomNav />
    </div>
  );
};

export default DropsPage; 