import React, { useMemo, useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import './Home.scss';

// Components
import BottomNav from '../../components/common/BottomNav';
import BusinessCard from '../../components/Business/BusinessCard';
import IncomeCounter from '../../components/common/IncomeCounter';
import Button from '../../components/common/Button';
import Icon from '../../components/common/Icon';

// Context
import { useGame } from '../../context/GameContext';
import { useAuth } from '../../context/AuthContext';
import { useBusinesses } from '../../hooks/useBusinesses';
import { useDrops } from '../../hooks/useDrops';
import { Business } from '../../types/business';
import BusinessService from '../../api/business';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface Notification {
  show: boolean;
  message: string;
  type: 'success' | 'error' | 'info';
}

const Home: React.FC = () => {
  const navigate = useNavigate();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [notification, setNotification] = useState<Notification>({
    show: false,
    message: '',
    type: 'info'
  });
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º GameContext –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const { 
    balance, 
    totalIncomePerHour, 
    ownedBusinesses,
    getMostProfitableBusiness,
    setBalance
  } = useGame();

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const { user, isAuthenticated, updateUser } = useAuth();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∏–∑–Ω–µ—Å–∞—Ö
  const { 
    businesses, 
    isLoading: businessesLoading, 
    collectAllIncome 
  } = useBusinesses();
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä–æ–ø–∞—Ö
  const { 
    stats: dropsStats, 
    isLoading: dropsLoading 
  } = useDrops();

  // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å
  const mostProfitableBusiness = getMostProfitableBusiness();

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ —á–∞—Å (–æ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –∏ –¥—Ä–æ–ø–æ–≤)
  const totalIncome = useMemo(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Ö–æ–¥ –∏–∑ GameContext
    const businessIncome = totalIncomePerHour || 0;
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –æ—Ç –¥—Ä–æ–ø–æ–≤, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    const dropIncome = dropsStats ? dropsStats.income_per_hour : 0;
    return businessIncome + dropIncome;
  }, [totalIncomePerHour, dropsStats]);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const [currentIncome, setCurrentIncome] = useState(0);
  const [lastUpdateTime, setLastUpdateTime] = useState(Date.now());
  const incomePerSecond = totalIncome / 3600;

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    const updateIncome = () => {
      const now = Date.now();
      const hourFraction = (now - lastUpdateTime) / 3600000; // –î–æ–ª—è —á–∞—Å–∞ (–≤ —á–∞—Å–∞—Ö)
      const newIncome = currentIncome + totalIncome * hourFraction;
      setCurrentIncome(newIncome);
      setLastUpdateTime(now);
    };

    const intervalId = setInterval(updateIncome, 1000);
    return () => clearInterval(intervalId);
  }, [currentIncome, totalIncome, lastUpdateTime]);

  const handleInviteFriends = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
    alert('–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ');
  };

  const navigateToBusiness = () => {
    navigate('/business');
  };

  const navigateToDarknet = () => {
    navigate('/darknet');
  };

  const navigateToDrops = () => {
    navigate('/drops');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞ –æ—Ç –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤
  const handleCollectIncome = useCallback(async () => {
    try {
      if (currentIncome <= 0) return;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ collectBusinessIncome –∏–∑ API –±–∏–∑–Ω–µ—Å–æ–≤
      const result = await BusinessService.collectBusinessIncome();
      
      if (result && result.amount) {
        const collectedAmount = Math.floor(currentIncome);
        
        setNotification({
          show: true,
          message: `–°–æ–±—Ä–∞–Ω–æ ${collectedAmount.toLocaleString()} –º–æ–Ω–µ—Ç`,
          type: 'success'
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ setBalance
        const newBalance = balance + collectedAmount;
        setBalance(newBalance);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥
        setCurrentIncome(0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (user && updateUser) {
          updateUser({ balance: newBalance });
        }
      } else {
        setNotification({
          show: true,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥',
          type: 'error'
        });
      }
    } catch (error) {
      console.error('Error collecting income:', error);
      setNotification({
        show: true,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        type: 'error'
      });
    }
  }, [currentIncome, balance, setBalance, user, updateUser]);

  return (
    <div className="home-page">
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ */}
      {notification.show && (
        <div className={`notification notification--${notification.type}`}>
          {notification.message}
        </div>
      )}
      
      <div className="home-page__balance">
        <h1>{user && user.balance ? user.balance.toLocaleString() : balance.toLocaleString()}</h1>
        <p>–º–æ–Ω–µ—Ç</p>
      </div>
      
      <IncomeCounter incomePerHour={totalIncome} />
      
      <div className="home-page__actions">
        <Button 
          variant="primary" 
          size="large" 
          fullWidth 
          icon="üë•" 
          onClick={handleInviteFriends}
        >
          –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
        </Button>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞–¥ –±–ª–æ–∫–æ–º –±–∏–∑–Ω–µ—Å–æ–≤ */}
      <div className="home-page__quick-actions">
        <div className="home-page__quick-action" onClick={navigateToBusiness}>
          <div className="home-page__quick-action-icon">
            <Icon name="business" size="lg" />
          </div>
          <div className="home-page__quick-action-label">–ë–∏–∑–Ω–µ—Å—ã</div>
        </div>
        <div className="home-page__quick-action" onClick={navigateToDrops}>
          <div className="home-page__quick-action-icon">
            <Icon name="drops" size="lg" />
          </div>
          <div className="home-page__quick-action-label">–î—Ä–æ–ø—ã</div>
        </div>
        <div className="home-page__quick-action" onClick={navigateToDarknet}>
          <div className="home-page__quick-action-icon">
            <Icon name="darknet" size="lg" />
          </div>
          <div className="home-page__quick-action-label">–î–∞—Ä–∫–Ω–µ—Ç</div>
        </div>
      </div>
      
      {/* –ë–ª–æ–∫ —Å –±–∏–∑–Ω–µ—Å–∞–º–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –±–∏–∑–Ω–µ—Å–æ–≤ –Ω–µ—Ç */}
      <div className="home-page__section">
        <div className="home-page__section-header">
          <h2>–í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã</h2>
          <span className="home-page__section-action" onClick={navigateToBusiness}>
            –í—Å–µ –±–∏–∑–Ω–µ—Å—ã
          </span>
        </div>
        <div className="home-page__business-list">
          {ownedBusinesses.length > 0 && mostProfitableBusiness ? (
            <BusinessCard 
              key={mostProfitableBusiness.business_id} 
              business={mostProfitableBusiness} 
              onClick={navigateToBusiness}
            />
          ) : (
            <div className="home-page__empty-business">
              <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤</p>
              <Button 
                variant="accent" 
                onClick={navigateToBusiness}
              >
                –ö—É–ø–∏—Ç—å –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å
              </Button>
            </div>
          )}
        </div>
      </div>
      
      <BottomNav />
    </div>
  );
};

export default Home;